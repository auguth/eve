// Block Module for Eve Checker 
   Licensed under GNU GPL v2.0 
   Copyright @ Auguth Research Foundation, 2024
   Primary Author : joby@auguth.org
   The Block Module is responsible for caling the statement specifc functions 
   across the eve checker. It acts as a entrypoint for deciding which checker 
   functions to call. As each individual checker functions e.g., constant, enums, 
   structures, functions, etc can generate expected code and cross-checks with the 
   given eve module. //

use helper, const, struct, enum, function

priv const str Context = "%"
priv const str PubExposure = "pub"
priv const str PrivExposure = "priv"
priv const str Use = "use"
priv const str Comment = "//"
priv const str Constant = "const"
priv const str Alias = "alias"
priv const str Alias = "enum"
priv const str Alias = "struct"
priv const str Alias = "fn"

priv str CommentPair

pub enum Pair
  CommentPair CommentPairWrap
  ConstPair ConstPairWrap
  AliasPair AliasPairWrap
  EnumPair EnumPairWrap
  StructPair StructPairWrap
  FunctionPair FunctionPairWrap

pub struct SyntaxInfo
  ConstMap Constants
  FunctionMap Functions
  TypeDeclMap TypeDeclarations

pub struct $Module 
  SyntaxInfo PubBlocks
  SyntaxInfo PrivBlocks
  UseInfo ImportMods
  FileInfo FileComments

priv fn BlockRecursion(vec[str] WordList, u32 Index, $Module)--> $Module 
  call: BlockDecision(WordList, Index)
    fail: u32 ErrorIndex, str ErrorMessage
    thrw: ErrorIndex, ErrorMessage
  pass: Pair NewPair, u32 ReturnIndex, bool IsPub
  oper: u32 CheckIndex = ++(ReturnIndex)
    fail: u32 ErrorIndex, str ErrorMessage
    thrw: ErrorIndex, ErrorMessage
  call: $Module = AddPairToModule(NewPair,IsPub,$Module)
    make: str ErrorMessage = "Unexpected Error Adding New Code Block ending 
          at {ReturnIndex} to Data Structure"
    thrw: ReturnIndex, ErrorMessage
  asgn: Length = len of WordList
    ///fail
  cond: >(Length,ReturnIndex)
    retn: $Module
  recr: WordList, ReturnIndex
    fail: u32 ErrorIndex, str ErrorMessage
  pass: Pair RecrPair, u32 NewReturnIndex, bool RecrIsPub
  call: $Module = AddPairToModule(RecrPair,RecrIsPub,$Module)
    make: str ErrorMessage = "Unexpected Error Adding New Code Block ending 
          at {NewReturnIndex} to Data Structure"
    thrw: NewReturnIndex, ErrorMessage
  retn: $Module


priv fn AddPairToModule(Pair NewPair, bool IsBool, $Module)--> $Module


priv fn BlockDecision(vec[str] WordList, u32 Index)--> Pair,u32,bool 
  asgn: CurrentWord = Index of WordList
    make: str ErrorMessage = "Invalid Index Provided"
    thrw: Index, ErrorMessage
  mtch: CurrentWord
      Context
        call: ContextBlock(WordList, Index) 
          fail: u32 ErrorIndex, str ErrorMessage 
          thrw: ErrorIndex, ErrorMessage
        pass: Pair NewPair, u32 ReturnIndex
        make: bool IsPub = true 
        retn: NewPair, ReturnIndex, IsPub
      |(PubExposure,PrivExposure)
        make: str EmptyContext = ""
        call: CodeBlock(WordList, Index, EmptyContext)
          fail: u32 ErrorIndex, str ErrorMessage 
          thrw: ErrorIndex, ErrorMessage
        pass: Pair NewPair, u32 ReturnIndex
        cond: ==(CurrentWord,PubExposure)
          make: bool IsPub = false 
          retn: NewPair, ReturnIndex, IsPub
        make: bool IsPub = true 
        retn: NewPair, ReturnIndex, IsPub
      Use
        make: str EmptyContext = ""
        make: bool IsPub = true
        call: UseBlock(WordList, Index, EmptyContext)
          fail: u32 ErrorIndex, str ErrorMessage 
          thrw: ErrorIndex, ErrorMessage
        pass: Pair NewPair, u32 ReturnIndex
        retn: NewPair, ReturnIndex, IsPub
      Comment 
        make: bool IsPub = true
        call: CommentBlock(WordList, Index)
          fail: u32 ErrorIndex, str ErrorMessage 
          thrw: ErrorIndex, ErrorMessage
        pass: Pair NewPair, u32 ReturnIndex
        retn: NewPair, ReturnIndex, IsPub
      catch
        make: str ErrorMessage = "Undefined Keyword {CurrentWord} at Word 
              Index {Index}. Requires Either of these keywords {Context}, 
              {PubExposure}, {PrivExposure} or {Comment}" 
        thrw: Index, ErrorMessage


priv fn ContextBlock (vec[str] WordList, u32 Index)--> Pair,u32,bool 
  call: FindContextEnd(WordList, Index)
    fail: u32 ErrorIndex, str ErrorMessage 
    thrw: ErrorIndex, ErrorMessage
  pass: u32 EndIndex 
  call: str Block Context = ReturnContext(WordList, Index, EndIndex)
    none:
    make: str ErrorMessage = "Eve Checker Internal Error"
    thrw: Index, ErrorMessage
  some:
  oper: u32 NewIndex = ++(EndIndex)
    make: str ErrorMessage = "Maximum Words Per Module Reached at {Index}." 
    thrw: EndIndex, ErrorMessage
  asgn: CurrentWord = NewIndex of WordList
    make: str ErrorMessage = "Context at {Index} requires Link to Code"
    thrw: NewIndex, ErrorMessage
  mtch: CurrentWord
    Context
      make: str ErrorMessage = "Combine Contexts {Index} and {NewIndex}"
      thrw: NewIndex, ErrorMessage
    |(PubExposure,PrivExposure)
      call: CodeBlock(WordList, NewIndex, BlockContext)
        fail: u32 ErrorIndex, str ErrorMessage
        thrw: ErrorIndex, ErrorMessage
      pass: Pair NewPair, u32 ReturnIndex
      cond: ==(CurrentWord,PubExposure)
        make: bool IsPub = false 
        retn: NewPair, ReturnIndex, IsPub
      make: bool IsPub = true 
      retn: NewPair, ReturnIndex, IsPub
    Use
      make: bool IsPub = true 
      call: UseBlock(WordList, NewIndex, BlockContext)
        fail: u32 ErrorIndex, str ErrorMessage
        thrw: ErrorIndex, ErrorMessage
      pass: Pair NewPair, u32 ReturnIndex
      retn: NewPair, ReturnIndex, IsPub
    catch
      make: str ErrorMessage = "Undefined Keyword {CurrentWord} at {NewIndex}" 
      thrw: Index, ErrorMessage

priv fn ReturnContext(vec[u8] WordList, u32 Index, u32 EndIndex) --> str 
  oper: u32 StartIndex = ++(Index)
    thrw: none
  oper: u32 FinishIndex = --(EndIndex)
    thrw: none
  asgn: ContextSlice = StartIndex to FinishIndex of WordList
    thrw: none
  call: str BlockContext = CombineVectorString(ContextSlice)
    none:
    thrw: none
  some:
  retn: BlockContext

priv fn FindContextEnd(vec[str] WordList, u32 Index)--> u32 
  oper: u32 NewIndex = ++(Index)
    make: str ErrorMessage = "Maximum Words Per Module Reached at {Index}." 
    thrw: Index, ErrorMessage
  asgn: CurrentWord = NewIndex of WordList
    make: str ErrorMessage = "Unfilled Context at {Index}"
    thrw: Index, ErrorMessage
  cond: (==(CurrentWord,Context))
    recr: WordList, NewIndex
      fail: u32 ErrorIndex, str ErrorMessage 
      thrw: ErrorIndex, ErrorMessage
    pass: u32 EndIndex
    retn: EndIndex
  retn: NewIndex

priv fn CodeBlock(vec[str] WordList, u32 Index, str BlockContext)--> Pair, u32 
  oper: u32 NewIndex = ++(Index)
    make: str ErrorMessage = "Maximum Words Per Module Reached at {Index}." 
    thrw: Index, ErrorMessage
  asgn: CurrentWord = NewIndex of WordList
    make: str ErrorMessage = "Undefined Keyword {CurrentWord} at {NewIndex}" 
    thrw: NewIndex, ErrorMessage
  mtch: CurrentWord
    Constant
      call: ConstBlock(WordList, Index, BlockContext)
        fail: u32 ErrorIndex, str ErrorMessage 
        thrw: ErrorIndex, ErrorMessage
      pass: ConstPair NewPair, u32 PairEndingIndex
      make: Pair RetPair = NewPair as ConstPairWrap 
      retn: RetPair, PairEndingIndex
    Alias 
      call: AliasBlock(WordList, Index, BlockContext)
        fail: u32 ErrorIndex, str ErrorMessage 
        thrw: ErrorIndex, ErrorMessage
      pass: AliasPair NewPair, u32 PairEndingIndex
      make: Pair RetPair = NewPair as AliasPairWrap 
      retn: RetPair, PairEndingIndex
    Enum 
      call: EnumBlock(WordList, Index, BlockContext)
        fail: u32 ErrorIndex, str ErrorMessage 
        thrw: ErrorIndex, ErrorMessage
      pass: EnumPair NewPair, u32 PairEndingIndex
      make: Pair RetPair = NewPair as EnumPairWrap 
      retn: RetPair, PairEndingIndex
    Struct
      call: StructBlock(WordList, Index, BlockContext)
        fail: u32 ErrorIndex, str ErrorMessage 
        thrw: ErrorIndex, ErrorMessage
      pass: StructPair NewPair, u32 PairEndingIndex
      make: Pair RetPair = NewPair as StructPairWrap 
      retn: RetPair, PairEndingIndex
    Function
      call: FunctionBlock(WordList, Index, BlockContext)
        fail: u32 ErrorIndex, str ErrorMessage 
        thrw: ErrorIndex, ErrorMessage
      pass: FunctionPair NewPair, u32 PairEndingIndex
      make: Pair RetPair = NewPair as FunctionPairWrap 
      retn: RetPair, PairEndingIndex
    catch
      make: str ErrorMessage = "Undefined Keyword {CurrentWord} at {NewIndex}" 
      thrw: NewIndex, ErrorMessage

priv fn CommentBlock(vec[str] WordList, u32 Index) --> Pair, u32
  call: FindCommentEnd(WordList, Index)
    fail: u32 ErrorIndex, str ErrorMessage 
    thrw: ErrorIndex, ErrorMessage
  pass: u32 EndIndex 
  call: str ModComment = ReturnComment(WordList, Index, EndIndex)
    none:
    make: str ErrorMessage = "Eve Checker Internal Error"
    thrw: Index, ErrorMessage
  some:
  asgn: Pair RetPair = ModComment as CommentPair 

priv fn ReturnComment(vec[u8] WordList, u32 Index, u32 EndIndex) --> str 
  oper: u32 StartIndex = ++(Index)
    thrw: none
  oper: u32 FinishIndex = --(EndIndex)
    thrw: none
  asgn: CommentSlice = StartIndex to FinishIndex of WordList
    thrw: none
  call: str BlockContext = CombineVectorString(CommentSlice)
    thrw: none
  some:
  retn: BlockContext

priv fn FindCommentEnd(vec[str] WordList, u32 Index)--> u32 
  oper: u32 NewIndex = ++(Index)
    make: str ErrorMessage = "Maximum Words Per Module Reached at {Index}." 
    thrw: Index, ErrorMessage
  asgn: CurrentWord = NewIndex of WordList
    make: str ErrorMessage = "Unfilled Comment at {Index}"
    thrw: Index, ErrorMessage
  cond: (==(CurrentWord,Comment))
    recr: WordList, NewIndex
      fail: u32 ErrorIndex, str ErrorMessage 
      thrw: ErrorIndex, ErrorMessage
    pass: u32 EndIndex
    retn: EndIndex
  retn: NewIndex

priv fn UseBlock(vec[str] WordList, u32 Index, str BlockContext) --> Pair, u32

